package me.nuf.glade.module.impl.exploits;

import me.nuf.api.minecraft.BlockHelper;
import me.nuf.api.minecraft.EntityHelper;
import me.nuf.api.stopwatch.Stopwatch;
import me.nuf.glade.module.Category;
import me.nuf.glade.module.ToggleableModule;
import me.nuf.glade.properties.EnumProperty;
import me.nuf.glade.properties.NumberProperty;
import me.nuf.glade.properties.Property;
import me.nuf.glade.subjects.*;
import me.nuf.subjectapi.Listener;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;

/**
 * Created by nuf on 3/25/2016.
 * @author Aris (for writing a terrible Para phase)
 */
public final class Phase extends ToggleableModule {
    private final EnumProperty<Mode> mode = new EnumProperty<>(Mode.Skip, "Mode", "m");
    private final Property<Boolean> autoClip = new Property<>(false, "AutoClip", "ac", "clip");
    private final NumberProperty<Double> blocks = new NumberProperty<>(0.02D, 0.001D, 10D, "Blocks", "block", "b");

    private final Stopwatch stopwatch = new Stopwatch();

    public Phase() {
        super(new String[]{"Phase", "noclip"}, true, 0xFFBA90D4, Category.EXPLOITS);
        this.offerProperties(blocks, autoClip, mode);
        this.addListeners(new Listener<BlockBoundingBoxSubject>("phase_block_bounding_box_listener") {
            @Override
            public void call(BlockBoundingBoxSubject subject) {
                switch (mode.getValue()) {
                    case Para:
                        if (BlockHelper.isInsideBlock(minecraft.thePlayer) && !minecraft.gameSettings.keyBindSprint.isKeyDown())
                            if (subject.getBlockPos().getY() > minecraft.thePlayer.getEntityBoundingBox().minY - 0.4
                                    && subject.getBlockPos().getY() < minecraft.thePlayer.getEntityBoundingBox().maxY + 1)
                                subject.setBoundingBox(null);
                        if (BlockHelper.isInsideBlock(minecraft.thePlayer) && minecraft.gameSettings.keyBindSprint.isKeyDown())
                            subject.setBoundingBox(null);
                        break;
                    case Sand:
                        subject.setBoundingBox(null);
                        break;
                    case Climb:
                        if (minecraft.thePlayer.isCollidedHorizontally)
                            subject.setBoundingBox(null);
                        if ((minecraft.gameSettings.keyBindSneak.isKeyDown()) || (minecraft.gameSettings.keyBindJump.isKeyDown() && subject.getBlockPos().getY() > minecraft.thePlayer.posY))
                            subject.setCancelled(true);
                        break;
                    case Vertical:
                        if (subject.getBlockPos().getY() >= minecraft.thePlayer.getEntityBoundingBox().minY - 0.5)
                            if (!minecraft.thePlayer.onGround || minecraft.thePlayer.isCollidedHorizontally || BlockHelper.isInsideBlock(minecraft.thePlayer))
                                subject.setBoundingBox(null);
                        break;
                }
            }
        }, new Listener<TickSubject>("phase_tick_listener") {
            @Override
            public void call(TickSubject subject) {
                if (minecraft.thePlayer.isCollidedHorizontally
                        && minecraft.gameSettings.keyBindSprint.isKeyDown()) {
                    minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX,
                            minecraft.thePlayer.posY - 0.05, minecraft.thePlayer.posZ, true));
                    minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX,
                            minecraft.thePlayer.posY, minecraft.thePlayer.posZ, true));
                    minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX,
                            minecraft.thePlayer.posY - 0.05, minecraft.thePlayer.posZ, true));
                }
            }
        }, new Listener<MotionUpdateSubject>("phase_motion_update_listener") {
            @Override
            public void call(MotionUpdateSubject subject) {
                float direction = minecraft.thePlayer.rotationYaw;
                if (minecraft.thePlayer.moveForward < 0F)
                    direction += 180F;
                if (minecraft.thePlayer.moveStrafing > 0F)
                    direction -= 90F * (minecraft.thePlayer.moveForward < 0F ? -0.5F
                            : minecraft.thePlayer.moveForward > 0F ? 0.5F : 1F);
                if (minecraft.thePlayer.moveStrafing < 0F)
                    direction += 90F * (minecraft.thePlayer.moveForward < 0F ? -0.5F
                            : minecraft.thePlayer.moveForward > 0F ? 0.5F : 1F);

                double x = Math.cos((direction + 90) * Math.PI / 180) * 0.2D;
                double z = Math.sin((direction + 90) * Math.PI / 180) * 0.2D;

                double ix = minecraft.thePlayer.getHorizontalFacing().getDirectionVec().getX() * 0.1D;
                double iz = minecraft.thePlayer.getHorizontalFacing().getDirectionVec().getZ() * 0.1D;

                minecraft.getNetHandler().addToSendQueue(new C0BPacketEntityAction(minecraft.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                switch (mode.getValue()) {
                    case Vertical:
                        switch (subject.getTime()) {
                            case POST:
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX, minecraft.thePlayer.posY - 0.05D, minecraft.thePlayer.posZ, true));
                                if (!minecraft.thePlayer.isCollidedVertically && BlockHelper.isInsideBlock(minecraft.thePlayer))
                                    setEnabled(false);
                                break;
                        }
                    case Sand:
                        minecraft.thePlayer.motionY = 0D;

                        if (minecraft.inGameHasFocus) {
                            if (minecraft.gameSettings.keyBindJump.isKeyDown())
                                minecraft.thePlayer.motionY += 0.35D;
                            if (minecraft.gameSettings.keyBindSneak.isKeyDown())
                                minecraft.thePlayer.motionY -= 0.35D;
                        }

                        minecraft.thePlayer.noClip = true;
                        break;
                    case Para:
                        if (minecraft.thePlayer.isCollidedHorizontally && !BlockHelper.isInsideBlock(minecraft.thePlayer))
                            if (EntityHelper.getDirection().equalsIgnoreCase("EAST")) {
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX + 0.5, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, minecraft.thePlayer.onGround));
                                minecraft.thePlayer.setPosition(minecraft.thePlayer.posX + 1, minecraft.thePlayer.posY, minecraft.thePlayer.posZ);
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.POSITIVE_INFINITY, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, minecraft.thePlayer.onGround));
                            } else if (EntityHelper.getDirection().equalsIgnoreCase("WEST")) {
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX - 0.5, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, minecraft.thePlayer.onGround));
                                minecraft.thePlayer.setPosition(minecraft.thePlayer.posX - 1, minecraft.thePlayer.posY, minecraft.thePlayer.posZ);
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.POSITIVE_INFINITY, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, minecraft.thePlayer.onGround));
                            } else if (EntityHelper.getDirection().equalsIgnoreCase("NORTH")) {
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX, minecraft.thePlayer.posY, minecraft.thePlayer.posZ - 0.5, minecraft.thePlayer.onGround));
                                minecraft.thePlayer.setPosition(minecraft.thePlayer.posX, minecraft.thePlayer.posY, minecraft.thePlayer.posZ - 1);
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.POSITIVE_INFINITY, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, minecraft.thePlayer.onGround));
                            } else if (EntityHelper.getDirection().equalsIgnoreCase("SOUTH")) {
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX, minecraft.thePlayer.posY, minecraft.thePlayer.posZ + 0.5, minecraft.thePlayer.onGround));
                                minecraft.thePlayer.setPosition(minecraft.thePlayer.posX, minecraft.thePlayer.posY, minecraft.thePlayer.posZ + 1);
                                minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(Double.POSITIVE_INFINITY, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, minecraft.thePlayer.onGround));
                            }
                        break;
                    case Skip:
                        if (stopwatch.hasReached(150) && minecraft.thePlayer.isCollidedHorizontally) {
                            double[] yOffsets = new double[]{-0.02500000037252903, -0.028571428997176036,
                                    -0.033333333830038704, -0.04000000059604645, -0.05000000074505806, -0.06666666766007741,
                                    -0.10000000149011612, -0.20000000298023224, -0.04000000059604645, -0.033333333830038704,
                                    -0.028571428997176036, -0.02500000037252903};

                            for (int index = 0; index < yOffsets.length; index++) {
                                minecraft.getNetHandler()
                                        .addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX,
                                                minecraft.thePlayer.posY + yOffsets[index], minecraft.thePlayer.posZ,
                                                minecraft.thePlayer.onGround));
                                minecraft.getNetHandler()
                                        .addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                                minecraft.thePlayer.posX + (x * index), minecraft.thePlayer.posY,
                                                minecraft.thePlayer.posZ + (z * index), minecraft.thePlayer.onGround));
                            }
                            stopwatch.reset();
                        }
                        break;
                    case Instant:
                        if (minecraft.thePlayer.isCollidedHorizontally) {
                            minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                    minecraft.thePlayer.posX, minecraft.thePlayer.posY - 0.05D, minecraft.thePlayer.posZ, true));
                            minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                    minecraft.thePlayer.posX + ix * 4D, minecraft.thePlayer.posY, minecraft.thePlayer.posZ + iz * 4D, true));
                            minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                    minecraft.thePlayer.posX, minecraft.thePlayer.posY - 0.05D, minecraft.thePlayer.posZ, true));
                            minecraft.thePlayer.setPosition(minecraft.thePlayer.posX + ix * 4D, minecraft.thePlayer.posY - 0.05D,
                                    minecraft.thePlayer.posZ + iz * 4D);
                        }
                        break;
                    case LatestDoor:
                        if (minecraft.thePlayer.isCollidedHorizontally) {
                            minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                    minecraft.thePlayer.posX, minecraft.thePlayer.posY + 0.05D, minecraft.thePlayer.posZ, true));
                            minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                    minecraft.thePlayer.posX + ix * 4D, minecraft.thePlayer.posY, minecraft.thePlayer.posZ + iz * 4D, true));
                            minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(
                                    minecraft.thePlayer.posX, minecraft.thePlayer.posY, minecraft.thePlayer.posZ, true));
                        }
                        break;
                    case VanillaSkip:
                        double[] offset = new double[]{x * 1.9D, 1.0F, z * 1.9D};

                        minecraft.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(minecraft.thePlayer.posX + (offset[0]), minecraft.thePlayer.posY, minecraft.thePlayer.posZ + (offset[2]), minecraft.thePlayer.onGround));
                        break;
                }
                minecraft.getNetHandler().addToSendQueue(new C0BPacketEntityAction(minecraft.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
            }
        }, new Listener<PushOutOfBlocksSubject>("phase_push_out_of_blocks_listener") {
            @Override
            public void call(PushOutOfBlocksSubject subject) {
                subject.setCancelled(true);
            }
        }, new Listener<InsideOpaqueBlockSubject>("phase_inside_opaque_block_listener") {
            @Override
            public void call(InsideOpaqueBlockSubject subject) {
                subject.setCancelled(true);
            }
        });
    }

    @Override
    protected void onEnable() {
        super.onEnable();
        if (autoClip.getValue() && minecraft.thePlayer != null && minecraft.theWorld != null) {
            double x = Math.cos(Math.toRadians(minecraft.thePlayer.rotationYaw + 90F));
            double z = Math.sin(Math.toRadians(minecraft.thePlayer.rotationYaw + 90F));
            minecraft.thePlayer.setPosition(minecraft.thePlayer.posX + (1F * blocks.getValue() * x + 0F * blocks.getValue() * z), minecraft.thePlayer.posY, minecraft.thePlayer.posZ + (1F * blocks.getValue() * z - 0F * blocks.getValue() * x));
        }
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        minecraft.thePlayer.noClip = false;
    }

    public enum Mode {
        Sand, Skip, Instant, VanillaSkip, Climb, LatestDoor, Vertical, Para
    }
}
